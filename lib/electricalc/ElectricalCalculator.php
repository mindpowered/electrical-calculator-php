<?php
/**
 * Generated by Haxe 4.1.1
 */

namespace electricalc;

use \maglev\MagLevString;
use \maglev\MagLevFunction;
use \php\Boot;
use \maglev\MagLevResult;
use \maglev\MagLev;
use \maglev\MagLevError;
use \maglev\MagLevArray;

class ElectricalCalculator {
	/**
	 * @var MagLev
	 */
	public $maglev;

	/**
	 * @param MagLev $maglev
	 * 
	 * @return void
	 */
	public function __construct ($maglev) {
		#/src/electricalc/ElectriCalc.hx:12: characters 3-23
		$this->maglev = $maglev;
		#/src/electricalc/ElectriCalc.hx:13: characters 3-22
		$this->registerMyMethods();
	}

	/**
	 * @return void
	 */
	public function registerMyMethods () {
		#/src/electricalc/ElectriCalc.hx:17: characters 3-25
		$bus = $this->maglev;
		#/src/electricalc/ElectriCalc.hx:19: lines 19-28
		$this->maglev->register("ElectricalCalculator.ConvertPhaseAngleToPowerFactor", MagLevFunction::fromFunction(function ($args) use (&$bus) {
			#/src/electricalc/ElectriCalc.hx:20: characters 4-48
			$data = MagLevArray::create();
			#/src/electricalc/ElectriCalc.hx:21: characters 4-59
			$data->push(MagLevString::fromString("_not_implemented_"));
			#/src/electricalc/ElectriCalc.hx:22: characters 4-93
			$data->push(MagLevString::fromString("ElectricalCalculator.ConvertPhaseAngleToPowerFactor"));
			#/src/electricalc/ElectriCalc.hx:23: characters 4-53
			$data->push(MagLevString::fromString("electricalc"));
			#/src/electricalc/ElectriCalc.hx:24: characters 4-48
			$bus->call("MindPowered.Telemetry.Send", $data);
			#/src/electricalc/ElectriCalc.hx:25: characters 4-249
			$err = MagLevError::create(-20000, "You are trying to use the 'ElectricalCalculator.ConvertPhaseAngleToPowerFactor' method but it's not quite done yet. Please email support@mindpowered.dev to find out when it will be done.", $data);
			#/src/electricalc/ElectriCalc.hx:26: characters 4-58
			$result = MagLevResult::fromError($err);
			#/src/electricalc/ElectriCalc.hx:27: characters 4-17
			return $result;
		}));
		#/src/electricalc/ElectriCalc.hx:30: lines 30-39
		$this->maglev->register("ElectricalCalculator.ConvertPowerFactorToPhaseAngle", MagLevFunction::fromFunction(function ($args) use (&$bus) {
			#/src/electricalc/ElectriCalc.hx:31: characters 4-48
			$data = MagLevArray::create();
			#/src/electricalc/ElectriCalc.hx:32: characters 4-59
			$data->push(MagLevString::fromString("_not_implemented_"));
			#/src/electricalc/ElectriCalc.hx:33: characters 4-93
			$data->push(MagLevString::fromString("ElectricalCalculator.ConvertPowerFactorToPhaseAngle"));
			#/src/electricalc/ElectriCalc.hx:34: characters 4-53
			$data->push(MagLevString::fromString("electricalc"));
			#/src/electricalc/ElectriCalc.hx:35: characters 4-48
			$bus->call("MindPowered.Telemetry.Send", $data);
			#/src/electricalc/ElectriCalc.hx:36: characters 4-249
			$err = MagLevError::create(-20000, "You are trying to use the 'ElectricalCalculator.ConvertPowerFactorToPhaseAngle' method but it's not quite done yet. Please email support@mindpowered.dev to find out when it will be done.", $data);
			#/src/electricalc/ElectriCalc.hx:37: characters 4-58
			$result = MagLevResult::fromError($err);
			#/src/electricalc/ElectriCalc.hx:38: characters 4-17
			return $result;
		}));
		#/src/electricalc/ElectriCalc.hx:41: lines 41-50
		$this->maglev->register("ElectricalCalculator.CalculateSinglePhasePower", MagLevFunction::fromFunction(function ($args) use (&$bus) {
			#/src/electricalc/ElectriCalc.hx:42: characters 4-48
			$data = MagLevArray::create();
			#/src/electricalc/ElectriCalc.hx:43: characters 4-59
			$data->push(MagLevString::fromString("_not_implemented_"));
			#/src/electricalc/ElectriCalc.hx:44: characters 4-88
			$data->push(MagLevString::fromString("ElectricalCalculator.CalculateSinglePhasePower"));
			#/src/electricalc/ElectriCalc.hx:45: characters 4-53
			$data->push(MagLevString::fromString("electricalc"));
			#/src/electricalc/ElectriCalc.hx:46: characters 4-48
			$bus->call("MindPowered.Telemetry.Send", $data);
			#/src/electricalc/ElectriCalc.hx:47: characters 4-244
			$err = MagLevError::create(-20000, "You are trying to use the 'ElectricalCalculator.CalculateSinglePhasePower' method but it's not quite done yet. Please email support@mindpowered.dev to find out when it will be done.", $data);
			#/src/electricalc/ElectriCalc.hx:48: characters 4-58
			$result = MagLevResult::fromError($err);
			#/src/electricalc/ElectriCalc.hx:49: characters 4-17
			return $result;
		}));
		#/src/electricalc/ElectriCalc.hx:52: lines 52-61
		$this->maglev->register("ElectricalCalculator.CalculateThreePhasePower", MagLevFunction::fromFunction(function ($args) use (&$bus) {
			#/src/electricalc/ElectriCalc.hx:53: characters 4-48
			$data = MagLevArray::create();
			#/src/electricalc/ElectriCalc.hx:54: characters 4-59
			$data->push(MagLevString::fromString("_not_implemented_"));
			#/src/electricalc/ElectriCalc.hx:55: characters 4-87
			$data->push(MagLevString::fromString("ElectricalCalculator.CalculateThreePhasePower"));
			#/src/electricalc/ElectriCalc.hx:56: characters 4-53
			$data->push(MagLevString::fromString("electricalc"));
			#/src/electricalc/ElectriCalc.hx:57: characters 4-48
			$bus->call("MindPowered.Telemetry.Send", $data);
			#/src/electricalc/ElectriCalc.hx:58: characters 4-243
			$err = MagLevError::create(-20000, "You are trying to use the 'ElectricalCalculator.CalculateThreePhasePower' method but it's not quite done yet. Please email support@mindpowered.dev to find out when it will be done.", $data);
			#/src/electricalc/ElectriCalc.hx:59: characters 4-58
			$result = MagLevResult::fromError($err);
			#/src/electricalc/ElectriCalc.hx:60: characters 4-17
			return $result;
		}));
	}
}

Boot::registerClass(ElectricalCalculator::class, 'electricalc.ElectricalCalculator');
